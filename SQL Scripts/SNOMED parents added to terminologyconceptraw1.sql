--The 1st-layer descendents
WITH result0 AS(
SELECT CLARITY_CONCEPT.CONCEPT_ID   ID,
       CLARITY_CONCEPT.CODESYSTEM_C STANDARDID,
       ZC_CODESYSTEM.ABBR STANDARDNAME,
       ZC_CODESYSTEM.TITLE STANDARDOID,
       CLARITY_CONCEPT.CODE STANDARDCODE,
       CLARITY_CONCEPT.NAME STANDARDTERM,
	   CLARITY_CONCEPT.CONCEPT_TYPE_C,
	   hie.PARENT_CONCEPT_ID
,pardeets.CONCEPT_ID [ParentConceptCode]
,pardeets.FULLY_SPECIFIED_NM [ParentConceptName]
,hie.RELATIONSHIP
,reldeets.CONCEPT_ID
,reldeets.FULLY_SPECIFIED_NM

  FROM CLARITY_CONCEPT
    LEFT OUTER JOIN ZC_CODESYSTEM
      ON CLARITY_CONCEPT.CODESYSTEM_C = ZC_CODESYSTEM.CODESYSTEM_C

LEFT join SNOMED_HIERARCHY hie 
	ON CLARITY_CONCEPT.CONCEPT_ID = hie.CONCEPT_ID
LEFT join SNOMED_CONCEPT pardeets 
	ON hie.PARENT_CONCEPT_ID = pardeets.CONCEPT_ID
LEFT join SNOMED_CONCEPT reldeets 
	ON hie.RELATIONSHIP = reldeets.CONCEPT_ID
  WHERE CLARITY_CONCEPT.CONCEPT_TYPE_C IN ( 1, 6 )
    AND CLARITY_CONCEPT.CODESYSTEM_C = 2
    AND CLARITY_CONCEPT.CODE IS NOT NULL
	
and hie.PARENT_CONCEPT_ID in ('SNOMED#73211009') --our test concepts
and RELATIONSHIP = 'SNOMED#116680003' --parent, e.g. "Is a" in reverse
--and ENTITY_INI = 'EPT'
), 
-- The 2nd-layer descendents
result1 AS(
SELECT 
		 CLARITY_CONCEPT.CONCEPT_ID   ID,
       CLARITY_CONCEPT.CODESYSTEM_C STANDARDID,
       ZC_CODESYSTEM.ABBR STANDARDNAME,
       ZC_CODESYSTEM.TITLE STANDARDOID,
       CLARITY_CONCEPT.CODE STANDARDCODE,
       CLARITY_CONCEPT.NAME STANDARDTERM,
	   CLARITY_CONCEPT.CONCEPT_TYPE_C,
	   hie.PARENT_CONCEPT_ID
,pardeets.CONCEPT_ID [ParentConceptCode]
,pardeets.FULLY_SPECIFIED_NM [ParentConceptName]
,hie.RELATIONSHIP
,reldeets.CONCEPT_ID
,reldeets.FULLY_SPECIFIED_NM

  FROM result0
    LEFT OUTER JOIN ZC_CODESYSTEM
      ON result0.STANDARDID = ZC_CODESYSTEM.CODESYSTEM_C

LEFT join SNOMED_HIERARCHY hie
	ON result0.ID = hie.PARENT_CONCEPT_ID

LEFT join SNOMED_CONCEPT pardeets 
	ON hie.PARENT_CONCEPT_ID = pardeets.CONCEPT_ID
LEFT join SNOMED_CONCEPT reldeets 
	ON hie.RELATIONSHIP = reldeets.CONCEPT_ID
LEFT join CLARITY_CONCEPT
	ON CLARITY_CONCEPT.CONCEPT_ID=hie.CONCEPT_ID
  WHERE result0.CONCEPT_TYPE_C IN ( 1, 6 )
    AND result0.STANDARDID = 2
    AND result0.STANDARDCODE IS NOT NULL
	and hie.RELATIONSHIP = 'SNOMED#116680003' --parent, e.g. "Is a" in reverse
--and ENTITY_INI = 'EPT'
),
-- The 3rd-layer descendents
result2 AS(
SELECT 
		 CLARITY_CONCEPT.CONCEPT_ID   ID,
       CLARITY_CONCEPT.CODESYSTEM_C STANDARDID,
       ZC_CODESYSTEM.ABBR STANDARDNAME,
       ZC_CODESYSTEM.TITLE STANDARDOID,
       CLARITY_CONCEPT.CODE STANDARDCODE,
       CLARITY_CONCEPT.NAME STANDARDTERM,
	   CLARITY_CONCEPT.CONCEPT_TYPE_C,
	   hie.PARENT_CONCEPT_ID
,pardeets.CONCEPT_ID [ParentConceptCode]
,pardeets.FULLY_SPECIFIED_NM [ParentConceptName]
,hie.RELATIONSHIP
,reldeets.CONCEPT_ID
,reldeets.FULLY_SPECIFIED_NM

  FROM result1
    LEFT OUTER JOIN ZC_CODESYSTEM
      ON result1.STANDARDID = ZC_CODESYSTEM.CODESYSTEM_C

LEFT join SNOMED_HIERARCHY hie
	ON result1.ID = hie.PARENT_CONCEPT_ID

LEFT join SNOMED_CONCEPT pardeets 
	ON hie.PARENT_CONCEPT_ID = pardeets.CONCEPT_ID
LEFT join SNOMED_CONCEPT reldeets 
	ON hie.RELATIONSHIP = reldeets.CONCEPT_ID
LEFT join CLARITY_CONCEPT
	ON CLARITY_CONCEPT.CONCEPT_ID=hie.CONCEPT_ID
  WHERE result1.CONCEPT_TYPE_C IN ( 1, 6 )
    AND result1.STANDARDID = 2
    AND result1.STANDARDCODE IS NOT NULL
	and hie.RELATIONSHIP = 'SNOMED#116680003' --parent, e.g. "Is a" in reverse
--and ENTITY_INI = 'EPT'
),
-- The fourth-layer descendents
result3 AS(
SELECT 
		 CLARITY_CONCEPT.CONCEPT_ID   ID,
       CLARITY_CONCEPT.CODESYSTEM_C STANDARDID,
       ZC_CODESYSTEM.ABBR STANDARDNAME,
       ZC_CODESYSTEM.TITLE STANDARDOID,
       CLARITY_CONCEPT.CODE STANDARDCODE,
       CLARITY_CONCEPT.NAME STANDARDTERM,
	   CLARITY_CONCEPT.CONCEPT_TYPE_C,
	   hie.PARENT_CONCEPT_ID
,pardeets.CONCEPT_ID [ParentConceptCode]
,pardeets.FULLY_SPECIFIED_NM [ParentConceptName]
,hie.RELATIONSHIP
,reldeets.CONCEPT_ID
,reldeets.FULLY_SPECIFIED_NM

  FROM result2
    LEFT OUTER JOIN ZC_CODESYSTEM
      ON result2.STANDARDID = ZC_CODESYSTEM.CODESYSTEM_C

LEFT join SNOMED_HIERARCHY hie
	ON result2.ID = hie.PARENT_CONCEPT_ID

LEFT join SNOMED_CONCEPT pardeets 
	ON hie.PARENT_CONCEPT_ID = pardeets.CONCEPT_ID
LEFT join SNOMED_CONCEPT reldeets 
	ON hie.RELATIONSHIP = reldeets.CONCEPT_ID
LEFT join CLARITY_CONCEPT
	ON CLARITY_CONCEPT.CONCEPT_ID=hie.CONCEPT_ID
  WHERE result2.CONCEPT_TYPE_C IN ( 1, 6 )
    AND result2.STANDARDID = 2
    AND result2.STANDARDCODE IS NOT NULL
-- and	CLARITY_CONCEPT.CONCEPT_ID in ('SNOMED#698934009','SNOMED#363021000000102') --our test concepts
-- and hie.PARENT_CONCEPT_ID in ('SNOMED#404684003', 'SNOMED#243796009', 'SNOMED#444071008', 'SNOMED#444107005')
	and hie.RELATIONSHIP = 'SNOMED#116680003' --parent, e.g. "Is a" in reverse
--and ENTITY_INI = 'EPT'
),
--The fifth-layer descendents
result4 AS(
SELECT 
		 CLARITY_CONCEPT.CONCEPT_ID   ID,
       CLARITY_CONCEPT.CODESYSTEM_C STANDARDID,
       ZC_CODESYSTEM.ABBR STANDARDNAME,
       ZC_CODESYSTEM.TITLE STANDARDOID,
       CLARITY_CONCEPT.CODE STANDARDCODE,
       CLARITY_CONCEPT.NAME STANDARDTERM,
	   CLARITY_CONCEPT.CONCEPT_TYPE_C,
	   hie.PARENT_CONCEPT_ID
,pardeets.CONCEPT_ID [ParentConceptCode]
,pardeets.FULLY_SPECIFIED_NM [ParentConceptName]
,hie.RELATIONSHIP
,reldeets.CONCEPT_ID
,reldeets.FULLY_SPECIFIED_NM

  FROM result3
    LEFT OUTER JOIN ZC_CODESYSTEM
      ON result3.STANDARDID = ZC_CODESYSTEM.CODESYSTEM_C

LEFT join SNOMED_HIERARCHY hie
	ON result3.ID = hie.PARENT_CONCEPT_ID

LEFT join SNOMED_CONCEPT pardeets 
	ON hie.PARENT_CONCEPT_ID = pardeets.CONCEPT_ID
LEFT join SNOMED_CONCEPT reldeets 
	ON hie.RELATIONSHIP = reldeets.CONCEPT_ID
LEFT join CLARITY_CONCEPT
	ON CLARITY_CONCEPT.CONCEPT_ID=hie.CONCEPT_ID
  WHERE result3.CONCEPT_TYPE_C IN ( 1, 6 )
    AND result3.STANDARDID = 2
    AND result3.STANDARDCODE IS NOT NULL
	and hie.RELATIONSHIP = 'SNOMED#116680003' --parent, e.g. "Is a" in reverse
--and ENTITY_INI = 'EPT'
)

-- You can expand the previous scripts layer by layer when the root conceptId has a higher hierachy

SELECT * FROM result0
UNION
SELECT * FROM result1
UNION
SELECT * FROM result2
UNION
SELECT * FROM result3
UNION
SELECT * FROM result4


-- If you only hopes to find the children concepts
--SELECT ID, STANDARDTERM FROM result0
--UNION
--SELECT ID, STANDARDTERM FROM result1
--UNION
--SELECT ID, STANDARDTERM FROM result2
--UNION
--SELECT ID, STANDARDTERM FROM result3
--UNION
--SELECT ID, STANDARDTERM FROM result4
--GROUP BY ID, STANDARDTERM
